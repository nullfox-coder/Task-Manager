version: '3.8'

services:
  nginx:
    build:
      context: .
      dockerfile: Dockerfile.nginx
    ports:
      - "80:80"
      - "443:443"
      - "9090:9090"
    depends_on:
      - api-gateway
    networks:
      - task-network
    volumes:
      - static_volume:/app/static
      - ssl_volume:/etc/nginx/ssl
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  api-gateway:
    build:
      context: ../..
      dockerfile: deploy/docker/Dockerfile.gateway
    environment:
      - NODE_ENV=production
      - GATEWAY_PORT=3000
      - CLIENT_URL=https://localhost
      - JWT_SECRET=${JWT_SECRET}
      - TASK_SERVICE_URL=http://task-service-1:3001
      - LOAD_BALANCER_STRATEGY=round-robin
    depends_on:
      - task-service-1
      - task-service-2
    networks:
      - task-network
    volumes:
      - logs_volume:/app/logs
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
      restart_policy:
        condition: on-failure
        max_attempts: 3

  task-service-1:
    build:
      context: ../..
      dockerfile: deploy/docker/Dockerfile.service
    environment:
      - NODE_ENV=production
      - SERVICE_PORT=3001
      - GATEWAY_URL=http://api-gateway:3000
      - DATABASE_URL=${DATABASE_URL}
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_CLIENT_EMAIL=${FIREBASE_CLIENT_EMAIL}
      - FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY}
    networks:
      - task-network
    volumes:
      - logs_volume:/app/logs
      - cache_volume:/app/cache
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
      restart_policy:
        condition: on-failure
        max_attempts: 3

  task-service-2:
    build:
      context: ../..
      dockerfile: deploy/docker/Dockerfile.service
    environment:
      - NODE_ENV=production
      - SERVICE_PORT=3001
      - GATEWAY_URL=http://api-gateway:3000
      - DATABASE_URL=${DATABASE_URL}
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_CLIENT_EMAIL=${FIREBASE_CLIENT_EMAIL}
      - FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY}
    networks:
      - task-network
    volumes:
      - logs_volume:/app/logs
      - cache_volume:/app/cache
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
      restart_policy:
        condition: on-failure
        max_attempts: 3

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./alert-rules.yml:/etc/prometheus/alert-rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - task-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  alertmanager:
    image: prom/alertmanager:latest
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    networks:
      - task-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana-dashboards.json:/etc/grafana/provisioning/dashboards/dashboards.yaml
      - ./dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    networks:
      - task-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  backup:
    image: alpine:latest
    volumes:
      - logs_volume:/logs
      - cache_volume:/cache
      - backup_volume:/backup
    command: >
      sh -c "while true; do
        tar -czf /backup/backup-$$(date +%Y%m%d-%H%M%S).tar.gz /logs /cache;
        sleep 86400;
      done"
    networks:
      - task-network
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M

networks:
  task-network:
    driver: bridge

volumes:
  logs_volume:
    driver: local
  cache_volume:
    driver: local
  static_volume:
    driver: local
  ssl_volume:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  backup_volume:
    driver: local
